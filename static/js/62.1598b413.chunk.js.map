{"version":3,"sources":["Components/Item/ItemComponent.jsx","Components/SelectContinent/SelectContinentComponent.jsx"],"names":["ItemComponent","props","type","item","isSelected","selectItem","className","role","onClick","name","code","currency","native","SelectContinentComponent","actions","fetchContinentsList","continent","this","selectContinent","country","fetchCountryDetails","continents","selectedContinent","countriesList","selectedCountry","continentsError","error","continentsDOMMap","map","index","key","countriesListDOMMap","selectCountry","length","React","Component","withRouter","connect","state","dispatch","bindActionCreators","ContinentsActions"],"mappings":"6LAwFeA,EAtFO,SAAAC,GAAU,IACtBC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,KAAMC,EAA2BH,EAA3BG,WAAYC,EAAeJ,EAAfI,WAChC,MAAa,cAATH,EAEA,yBACEI,UAAU,OACVC,KAAK,eACLC,QAAS,iBAA4B,oBAAfH,GAA6BA,MAElDD,GACC,yBAAKE,UAAU,gBACb,wCAGJ,yBAAKA,UAAU,gBACb,4BAAKH,EAAKM,OAEZ,yBAAKH,UAAU,gBACb,yCACA,2BACE,0BAAMA,UAAU,UAAhB,kBACCH,EAAKO,QAOH,YAATR,EAEA,yBACEI,UAAU,OACVC,KAAK,eACLC,QAAS,iBAA4B,oBAAfH,GAA6BA,MAElDD,GACC,yBAAKE,UAAU,gBACb,wCAGJ,yBAAKA,UAAU,gBACb,4BAAKH,EAAKM,OAEZ,yBAAKH,UAAU,gBACb,uCACA,2BACE,0BAAMA,UAAU,UAAhB,kBACCH,EAAKO,QAOH,qBAATR,EAEA,yBACEI,UAAU,gBACVC,KAAK,eACLC,QAAS,iBAA4B,oBAAfH,GAA6BA,MAEnD,yBAAKC,UAAU,gBACb,4BAAKH,EAAKM,OAEZ,yBAAKH,UAAU,gBACb,uCACA,2BACE,0BAAMA,UAAU,UAAhB,kBACCH,EAAKO,MAER,2BACE,0BAAMJ,UAAU,UAAhB,sBACCH,EAAKQ,UAER,2BACE,0BAAML,UAAU,UAAhB,mBACCH,EAAKS,UAOT,M,QCrEHC,E,YACJ,WAAYZ,GAAQ,IAAD,6BACjB,4CAAMA,IACcA,EAAZa,QACAC,sBAHS,E,6EAMHC,GACMC,KAAKhB,MAAjBa,QACAI,gBAAgBF,K,oCAGZG,GACQF,KAAKhB,MAAjBa,QACAM,oBAAoBD,K,+BAGpB,IAAD,SASHF,KAAKhB,MAPPoB,WACEA,EAHG,EAGHA,WACAC,EAJG,EAIHA,kBACAC,EALG,EAKHA,cACAC,EANG,EAMHA,gBACOC,EAPJ,EAOHC,MAGEC,EAAmBN,EAAWO,KAAI,SAACZ,EAAWa,GAAZ,OACtC,kBAAC,EAAD,CACE3B,KAAK,YACLC,KAAMa,EACNc,IAAG,oBAAeD,GAClBzB,WAAYkB,GAAqBN,EAAUN,OAASY,EAAkBZ,KACtEL,WAAY,kBAAM,EAAKa,gBAAgBF,SAGrCe,EAAsBR,EAAcK,KAAI,SAACT,EAASU,GACtD,OAAIL,GAAmBL,EAAQT,OAASc,EAAgBd,KAEpD,kBAAC,EAAD,CAAeR,KAAK,mBAAmBC,KAAMqB,EAAiBM,IAAKD,EAAOzB,YAAU,IAItF,kBAAC,EAAD,CACEF,KAAK,UACLC,KAAMgB,EACNW,IAAKD,EACLzB,YAAY,EACZC,WAAY,kBAAM,EAAK2B,cAAcb,SAI3C,OACE,oCACE,yBAAKb,UAAU,yBACb,4EACA,yEAEF,yBAAKA,UAAU,sBACZe,EAAWY,OAAS,EAAIN,EAAmB,sCAE9C,yBAAKrB,UAAU,sBACZiB,EAAcU,OAAS,EAAIF,EAAsB,IAEnDN,EAAgBQ,OAAS,GACxB,yBAAK3B,UAAU,aACb,2BAAImB,S,GAlEuBS,IAAMC,WA0E9BC,sBAAWC,aAlFF,SAAAC,GAAK,MAAK,CAChCjB,WAAYiB,EAAMjB,eAGO,SAAAkB,GAAQ,MAAK,CACtCzB,QAAS0B,YAAmB,eAAKC,KAAqBF,MA6E9BF,CAA6CxB","file":"static/js/62.1598b413.chunk.js","sourcesContent":["import React from 'react';\n\nconst ItemComponent = props => {\n  const { type, item, isSelected, selectItem } = props;\n  if (type === 'continent') {\n    return (\n      <div\n        className=\"item\"\n        role=\"presentation\"\n        onClick={() => typeof selectItem === 'function' && selectItem()}\n      >\n        {isSelected && (\n          <div className=\"item-overlay\">\n            <p>Selected</p>\n          </div>\n        )}\n        <div className=\"item-heading\">\n          <h3>{item.name}</h3>\n        </div>\n        <div className=\"item-details\">\n          <h4>Continent</h4>\n          <p>\n            <span className=\"bolder\">Code &nbsp;-&nbsp;</span>\n            {item.code}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (type === 'country') {\n    return (\n      <div\n        className=\"item\"\n        role=\"presentation\"\n        onClick={() => typeof selectItem === 'function' && selectItem()}\n      >\n        {isSelected && (\n          <div className=\"item-overlay\">\n            <p>Selected</p>\n          </div>\n        )}\n        <div className=\"item-heading\">\n          <h3>{item.name}</h3>\n        </div>\n        <div className=\"item-details\">\n          <h4>Country</h4>\n          <p>\n            <span className=\"bolder\">Code &nbsp;-&nbsp;</span>\n            {item.code}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (type === 'country-selected') {\n    return (\n      <div\n        className=\"item selected\"\n        role=\"presentation\"\n        onClick={() => typeof selectItem === 'function' && selectItem()}\n      >\n        <div className=\"item-heading\">\n          <h3>{item.name}</h3>\n        </div>\n        <div className=\"item-details\">\n          <h4>Country</h4>\n          <p>\n            <span className=\"bolder\">Code &nbsp;-&nbsp;</span>\n            {item.code}\n          </p>\n          <p>\n            <span className=\"bolder\">Currency &nbsp;-&nbsp;</span>\n            {item.currency}\n          </p>\n          <p>\n            <span className=\"bolder\">Native&nbsp;-&nbsp;</span>\n            {item.native}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default ItemComponent;\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport ItemComponent from '../Item/ItemComponent';\nimport { ContinentsActions } from '../../Store/Actions';\n\nconst mapStateToProps = state => ({\n  continents: state.continents\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({ ...ContinentsActions }, dispatch)\n});\n\nclass SelectContinentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    const { actions } = props;\n    actions.fetchContinentsList();\n  }\n\n  selectContinent(continent) {\n    const { actions } = this.props;\n    actions.selectContinent(continent);\n  }\n\n  selectCountry(country) {\n    const { actions } = this.props;\n    actions.fetchCountryDetails(country);\n  }\n\n  render() {\n    const {\n      continents: {\n        continents,\n        selectedContinent,\n        countriesList,\n        selectedCountry,\n        error: continentsError\n      }\n    } = this.props;\n    const continentsDOMMap = continents.map((continent, index) => (\n      <ItemComponent\n        type=\"continent\"\n        item={continent}\n        key={`continent-${index}`}\n        isSelected={selectedContinent && continent.code === selectedContinent.code}\n        selectItem={() => this.selectContinent(continent)}\n      />\n    ));\n    const countriesListDOMMap = countriesList.map((country, index) => {\n      if (selectedCountry && country.code === selectedCountry.code) {\n        return (\n          <ItemComponent type=\"country-selected\" item={selectedCountry} key={index} isSelected />\n        );\n      }\n      return (\n        <ItemComponent\n          type=\"country\"\n          item={country}\n          key={index}\n          isSelected={false}\n          selectItem={() => this.selectCountry(country)}\n        />\n      );\n    });\n    return (\n      <>\n        <div className=\"preface-text noselect\">\n          <h3>Select continents you would like to explore:</h3>\n          <p>You can only choose 1 continent at a time</p>\n        </div>\n        <div className=\"items-box noselect\">\n          {continents.length > 0 ? continentsDOMMap : 'Could not load list of continents!'}\n        </div>\n        <div className=\"items-box noselect\">\n          {countriesList.length > 0 ? countriesListDOMMap : ''}\n        </div>\n        {continentsError.length > 0 && (\n          <div className=\"error-box\">\n            <p>{continentsError}</p>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SelectContinentComponent));\n"],"sourceRoot":""}