{"version":3,"sources":["../node_modules/apollo-link-http-common/lib/bundle.esm.js"],"names":["fallbackHttpConfig","http","includeQuery","includeExtensions","headers","accept","options","method","throwServerError","response","result","message","error","Error","name","statusCode","status","parseAndCheckHttpResponse","operations","text","then","bodyText","JSON","parse","err","parseError","Promise","reject","Array","isArray","hasOwnProperty","map","op","operationName","checkFetcher","fetcher","fetch","window","createSignalIfSupported","AbortController","controller","signal","selectHttpOptionsAndBody","operation","fallbackConfig","configs","_i","arguments","length","credentials","forEach","config","extensions","variables","query","body","serializeFetchParameter","p","label","serialized","stringify","e","selectURI","fallbackURI","contextURI","getContext","uri"],"mappings":"0FAAA,wQAcIA,EAAqB,CACvBC,KAZuB,CACvBC,cAAc,EACdC,mBAAmB,GAWnBC,QATmB,CACnBC,OAAQ,MACR,eAAgB,oBAQhBC,QANmB,CACnBC,OAAQ,SAQNC,EAAmB,SAA0BC,EAAUC,EAAQC,GACjE,IAAIC,EAAQ,IAAIC,MAAMF,GAKtB,MAJAC,EAAME,KAAO,cACbF,EAAMH,SAAWA,EACjBG,EAAMG,WAAaN,EAASO,OAC5BJ,EAAMF,OAASA,EACTE,GAGJK,EAA4B,SAAmCC,GACjE,OAAO,SAAUT,GACf,OAAOA,EAASU,OAAOC,MAAK,SAAUC,GACpC,IACE,OAAOC,KAAKC,MAAMF,GAClB,MAAOG,GACP,IAAIC,EAAaD,EAKjB,OAJAC,EAAWX,KAAO,mBAClBW,EAAWhB,SAAWA,EACtBgB,EAAWV,WAAaN,EAASO,OACjCS,EAAWJ,SAAWA,EACfK,QAAQC,OAAOF,OAEvBL,MAAK,SAAUV,GAWhB,OAVID,EAASO,QAAU,KACrBR,EAAiBC,EAAUC,EAAQ,iDAAmDD,EAASO,QAG5FY,MAAMC,QAAQnB,IAAYA,EAAOoB,eAAe,SAAYpB,EAAOoB,eAAe,WACrFtB,EAAiBC,EAAUC,EAAQ,2CAA6CkB,MAAMC,QAAQX,GAAcA,EAAWa,KAAI,SAAUC,GACnI,OAAOA,EAAGC,iBACPf,EAAWe,eAAiB,MAG5BvB,OAKTwB,EAAe,SAAsBC,GACvC,IAAKA,GAA4B,qBAAVC,MAAuB,CAG5C,KADsB,qBAAXC,QAAkC,aACC,IAAI,IAAe,KAIjEC,EAA0B,WAC5B,GAA+B,qBAApBC,gBAAiC,MAAO,CACjDC,YAAY,EACZC,QAAQ,GAEV,IAAID,EAAa,IAAID,gBAErB,MAAO,CACLC,WAAYA,EACZC,OAHWD,EAAWC,SAOtBC,EAA2B,SAAkCC,EAAWC,GAG1E,IAFA,IAAIC,EAAU,GAELC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACtCD,EAAQC,EAAK,GAAKC,UAAUD,GAG9B,IAAIxC,EAAU,mBAAS,GAAIsC,EAAetC,QAAS,CACjDF,QAASwC,EAAexC,QACxB6C,YAAaL,EAAeK,cAG1BhD,EAAO2C,EAAe3C,KAC1B4C,EAAQK,SAAQ,SAAUC,GACxB7C,EAAU,mBAAS,GAAIA,EAAS6C,EAAO7C,QAAS,CAC9CF,QAAS,mBAAS,GAAIE,EAAQF,QAAS+C,EAAO/C,WAE5C+C,EAAOF,cAAa3C,EAAQ2C,YAAcE,EAAOF,aACrDhD,EAAO,mBAAS,GAAIA,EAAMkD,EAAOlD,SAEnC,IAAIgC,EAAgBU,EAAUV,cAC1BmB,EAAaT,EAAUS,WACvBC,EAAYV,EAAUU,UACtBC,EAAQX,EAAUW,MAClBC,EAAO,CACTtB,cAAeA,EACfoB,UAAWA,GAIb,OAFIpD,EAAKE,oBAAmBoD,EAAKH,WAAaA,GAC1CnD,EAAKC,eAAcqD,EAAKD,MAAQ,YAAMA,IACnC,CACLhD,QAASA,EACTiD,KAAMA,IAINC,EAA0B,SAAiCC,EAAGC,GAChE,IAAIC,EAEJ,IACEA,EAAarC,KAAKsC,UAAUH,GAC5B,MAAOI,GACP,IAAIpC,EAAqD,IAAI,IAAe,GAE5E,MADAA,EAAWA,WAAaoC,EAClBpC,EAGR,OAAOkC,GAGLG,EAAY,SAAmBnB,EAAWoB,GAC5C,IACIC,EADUrB,EAAUsB,aACCC,IAEzB,OAAIF,IAE8B,oBAAhBD,EACTA,EAAYpB,GAEZoB,GAAe","file":"static/js/nm.apollo-link-http-common.43955d9e.chunk.js","sourcesContent":["import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nvar fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\n\nvar throwServerError = function throwServerError(response, result, message) {\n  var error = new Error(message);\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n\nvar parseAndCheckHttpResponse = function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n      }\n\n      if (!Array.isArray(result) && !result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n        throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName) + \"'.\");\n      }\n\n      return result;\n    });\n  };\n};\n\nvar checkFetcher = function checkFetcher(fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    var library = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n  }\n};\n\nvar createSignalIfSupported = function createSignalIfSupported() {\n  if (typeof AbortController === 'undefined') return {\n    controller: false,\n    signal: false\n  };\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    controller: controller,\n    signal: signal\n  };\n};\n\nvar selectHttpOptionsAndBody = function selectHttpOptionsAndBody(operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign({}, fallbackConfig.options, {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http;\n  configs.forEach(function (config) {\n    options = __assign({}, options, config.options, {\n      headers: __assign({}, options.headers, config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign({}, http, config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\n\nvar serializeFetchParameter = function serializeFetchParameter(p, label) {\n  var serialized;\n\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n\n  return serialized;\n};\n\nvar selectURI = function selectURI(operation, fallbackURI) {\n  var context = operation.getContext();\n  var contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return fallbackURI || '/graphql';\n  }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };"],"sourceRoot":""}