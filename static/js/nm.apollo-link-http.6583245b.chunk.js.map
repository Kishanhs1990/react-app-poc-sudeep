{"version":3,"sources":["../node_modules/apollo-link-http/lib/bundle.esm.js"],"names":["createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","controller","contextHeaders","contextConfig","_b","body","signal","_c","_controller","query","definitions","some","d","kind","method","_d","queryParams","addQueryParam","key","value","push","encodeURIComponent","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join","rewriteURIForGET","observer","then","response","setContext","result","next","complete","catch","err","errors","data","error","abort","HttpLink","_super","opts","call","this","request"],"mappings":"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","file":"static/js/nm.apollo-link-http.6583245b.chunk.js","sourcesContent":["import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function createHttpLink(linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      fetcher = linkOptions.fetch,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n\n  checkFetcher(fetcher);\n\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function definitionIsMutation(d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\nfunction rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n\n  var addQueryParam = function addQueryParam(key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\n\nvar HttpLink = function (_super) {\n  __extends(HttpLink, _super);\n\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n\n  return HttpLink;\n}(ApolloLink);\n\nexport { HttpLink, createHttpLink };"],"sourceRoot":""}