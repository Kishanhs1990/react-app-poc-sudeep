{"version":3,"sources":["../node_modules/apollo-link-state/lib/utils.js","../node_modules/apollo-link-state/lib/index.js"],"names":["connectionRemoveConfig","test","directive","name","value","remove","removed","Map","__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","this","constructor","prototype","create","graphql","clientStateConfig","resolvers","defaults","cache","typeDefs","fragmentMatcher","writeData","data","_super","StateLink","apply","arguments","writeDefaults","request","operation","forward","of","definition_1","isArray","map","typeDef","str","trim","join","normalizeTypeDefs","setContext","_a","_b","schemas","concat","definition","directives","query","server","cached","get","docClone","set","removeClientSetsFromDocument","type","charAt","toUpperCase","slice","resolver","fieldName","rootValue","args","context","info","resultKey","aliasedNode","preAliasingNode","aliasNeeded","undefined","resolverMap","__typename","resolve","obs","observer","_complete","handlingNext","subscribe","next","errors","observerErrorHandler","error","bind","getContext","variables","then","nextData","complete","catch"],"mappings":"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","file":"static/js/nm.apollo-link-state.34edf94c.chunk.js","sourcesContent":["import { print } from 'graphql';\nimport { checkDocument, removeDirectivesFromDocument } from 'apollo-utilities';\nvar connectionRemoveConfig = {\n  test: function test(directive) {\n    return directive.name.value === 'client';\n  },\n  remove: true\n};\nvar removed = new Map();\nexport function removeClientSetsFromDocument(query) {\n  var cached = removed.get(query);\n  if (cached) return cached;\n  checkDocument(query);\n  var docClone = removeDirectivesFromDocument([connectionRemoveConfig], query);\n  removed.set(query, docClone);\n  return docClone;\n}\nexport function normalizeTypeDefs(typeDefs) {\n  var defs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n  return defs.map(function (typeDef) {\n    return typeof typeDef === 'string' ? typeDef : print(typeDef);\n  }).map(function (str) {\n    return str.trim();\n  }).join('\\n');\n}","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { hasDirectives, getMainDefinition } from 'apollo-utilities';\nimport * as Async from 'graphql-anywhere/lib/async';\nvar graphql = Async.graphql;\nimport { removeClientSetsFromDocument, normalizeTypeDefs } from './utils';\n\nvar capitalizeFirstLetter = function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport var withClientState = function withClientState(clientStateConfig) {\n  if (clientStateConfig === void 0) {\n    clientStateConfig = {\n      resolvers: {},\n      defaults: {}\n    };\n  }\n\n  var defaults = clientStateConfig.defaults,\n      cache = clientStateConfig.cache,\n      typeDefs = clientStateConfig.typeDefs,\n      fragmentMatcher = clientStateConfig.fragmentMatcher;\n\n  if (cache && defaults) {\n    cache.writeData({\n      data: defaults\n    });\n  }\n\n  return new (function (_super) {\n    __extends(StateLink, _super);\n\n    function StateLink() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    StateLink.prototype.writeDefaults = function () {\n      if (cache && defaults) {\n        cache.writeData({\n          data: defaults\n        });\n      }\n    };\n\n    StateLink.prototype.request = function (operation, forward) {\n      if (forward === void 0) {\n        forward = function forward() {\n          return Observable.of({\n            data: {}\n          });\n        };\n      }\n\n      if (typeDefs) {\n        var directives_1 = 'directive @client on FIELD';\n        var definition_1 = normalizeTypeDefs(typeDefs);\n        operation.setContext(function (_a) {\n          var _b = _a.schemas,\n              schemas = _b === void 0 ? [] : _b;\n          return {\n            schemas: schemas.concat([{\n              definition: definition_1,\n              directives: directives_1\n            }])\n          };\n        });\n      }\n\n      var isClient = hasDirectives(['client'], operation.query);\n      if (!isClient) return forward(operation);\n      var resolvers = typeof clientStateConfig.resolvers === 'function' ? clientStateConfig.resolvers() : clientStateConfig.resolvers;\n      var server = removeClientSetsFromDocument(operation.query);\n      var query = operation.query;\n      var type = capitalizeFirstLetter((getMainDefinition(query) || {}).operation) || 'Query';\n\n      var resolver = function resolver(fieldName, rootValue, args, context, info) {\n        if (rootValue === void 0) {\n          rootValue = {};\n        }\n\n        var resultKey = info.resultKey;\n        var aliasedNode = rootValue[resultKey];\n        var preAliasingNode = rootValue[fieldName];\n        var aliasNeeded = resultKey !== fieldName;\n\n        if (aliasedNode !== undefined || preAliasingNode !== undefined) {\n          return aliasedNode || preAliasingNode;\n        }\n\n        var resolverMap = resolvers[rootValue.__typename || type];\n\n        if (resolverMap) {\n          var resolve = resolverMap[fieldName];\n          if (resolve) return resolve(rootValue, args, context, info);\n        }\n\n        return (aliasNeeded ? aliasedNode : preAliasingNode) || (defaults || {})[fieldName];\n      };\n\n      if (server) operation.query = server;\n      var obs = server && forward ? forward(operation) : Observable.of({\n        data: {}\n      });\n      return new Observable(function (observer) {\n        var _complete = false;\n        var handlingNext = false;\n        obs.subscribe({\n          next: function next(_a) {\n            var data = _a.data,\n                errors = _a.errors;\n            var observerErrorHandler = observer.error.bind(observer);\n            var context = operation.getContext();\n            handlingNext = true;\n            graphql(resolver, query, data, context, operation.variables, {\n              fragmentMatcher: fragmentMatcher\n            }).then(function (nextData) {\n              observer.next({\n                data: nextData,\n                errors: errors\n              });\n\n              if (_complete) {\n                observer.complete();\n              }\n\n              handlingNext = false;\n            }).catch(observerErrorHandler);\n          },\n          error: observer.error.bind(observer),\n          complete: function complete() {\n            if (!handlingNext) {\n              observer.complete();\n            }\n\n            _complete = true;\n          }\n        });\n      });\n    };\n\n    return StateLink;\n  }(ApolloLink))();\n};"],"sourceRoot":""}