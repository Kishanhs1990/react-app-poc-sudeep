{"version":3,"sources":["../node_modules/diff-match-patch/index.js"],"names":["diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","text","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","op","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","data","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","slice","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","module","exports"],"mappings":"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","file":"static/js/nm.diff-match-patch.6caf1c8e.chunk.js","sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0; // Cost of an empty edit operation in terms of edit characters.\n\n  this.Diff_EditCost = 4; // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n\n  this.Match_Threshold = 0.5; // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n\n  this.Match_Distance = 1000; // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n\n  this.Patch_DeleteThreshold = 0.5; // Chunk size for context length.\n\n  this.Patch_Margin = 4; // The number of bits in an int.\n\n  this.Match_MaxBits = 32;\n} //  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\n\n\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n/** @typedef {{0: number, 1: string}} */\n\ndiff_match_patch.Diff;\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\n\ndiff_match_patch.prototype.diff_main = function (text1, text2, opt_checklines, opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n\n  var deadline = opt_deadline; // Check for null inputs.\n\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  } // Check for equality (speedup).\n\n\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n\n  var checklines = opt_checklines; // Trim off common prefix (speedup).\n\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength); // Trim off common suffix (speedup).\n\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.\n\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline); // Restore the prefix and suffix.\n\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_compute_ = function (text1, text2, checklines, deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.\n\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  } // Check to see if the problem can be split in two.\n\n\n  var hm = this.diff_halfMatch_(text1, text2);\n\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4]; // Send both pairs off for separate processing.\n\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline); // Merge the results.\n\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_lineMode_ = function (text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n  var diffs = this.diff_main(text1, text2, false, deadline); // Convert the diff back to original text.\n\n  this.diff_charsToLines_(diffs, linearray); // Eliminate freak matches (e.g. blank lines)\n\n  this.diff_cleanupSemantic(diffs); // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n\n          pointer = pointer + a.length;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n\n    pointer++;\n  }\n\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_bisect_ = function (text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length); // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length; // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n\n  var front = delta % 2 != 0; // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    } // Walk the front path one step.\n\n\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n\n      var y1 = x1 - k1;\n\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n\n      v1[k1_offset] = x1;\n\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    } // Walk the reverse path one step.\n\n\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n\n      var y2 = x2 - k2;\n\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n\n      v2[k2_offset] = x2;\n\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset; // Mirror x2 onto top-left coordinate system.\n\n          x2 = text1_length - x2;\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  } // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n\n\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_bisectSplit_ = function (text1, text2, x, y, deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y); // Compute both diffs serially.\n\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n  return diffs.concat(diffsb);\n};\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_linesToChars_ = function (text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n\n  lineArray[0] = '';\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n\n  function diff_linesToCharsMunge_(text) {\n    var chars = ''; // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n\n    var lineStart = 0;\n    var lineEnd = -1; // Keeping our own length variable is faster than looking it up.\n\n    var lineArrayLength = lineArray.length;\n\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {\n    chars1: chars1,\n    chars2: chars2,\n    lineArray: lineArray\n  };\n};\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_charsToLines_ = function (diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n\n    diffs[x][1] = text.join('');\n  }\n};\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\n\n\ndiff_match_patch.prototype.diff_commonPrefix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n};\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\n\n\ndiff_match_patch.prototype.diff_commonSuffix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n};\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_commonOverlap_ = function (text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length; // Eliminate the null case.\n\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  } // Truncate the longer string.\n\n\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n\n  var text_length = Math.min(text1_length, text2_length); // Quick check for the worst case.\n\n  if (text1 == text2) {\n    return text_length;\n  } // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n\n\n  var best = 0;\n  var length = 1;\n\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n\n    if (found == -1) {\n      return best;\n    }\n\n    length += found;\n\n    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_halfMatch_ = function (text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  } // First check if the second quarter is the seed for a half-match.\n\n\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.\n\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  } // A half-match was found, sort out the return data.\n\n\n  var text1_a, text1_b, text2_a, text2_b;\n\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_cleanupSemantic = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n  /** @type {?string} */\n\n  var lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n\n  var length_insertions1 = 0;\n  var length_deletions1 = 0; // Number of characters that changed after the equality.\n\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      } // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n\n\n      if (lastequality && lastequality.length <= Math.max(length_insertions1, length_deletions1) && lastequality.length <= Math.max(length_insertions2, length_deletions2)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.\n\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT; // Throw away the equality we just deleted.\n\n        equalitiesLength--; // Throw away the previous equality (it needs to be reevaluated).\n\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // Normalize the diff.\n\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n\n  this.diff_cleanupSemanticLossless(diffs); // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n\n  pointer = 1;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n\n      pointer++;\n    }\n\n    pointer++;\n  }\n};\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function (diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    } // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n\n\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n\n    return 0;\n  }\n\n  var pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1]; // First, shift the edit as far left as possible.\n\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      } // Second, step character by character right, looking for the best fit.\n\n\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2); // The >= encourages trailing rather than leading whitespace on edits.\n\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n\n        diffs[pointer][1] = bestEdit;\n\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n\n    pointer++;\n  }\n}; // Define some regex patterns for matching boundaries.\n\n\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\ndiff_match_patch.prototype.diff_cleanupEfficiency = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n  /** @type {?string} */\n\n  var lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n  var pointer = 0; // Index of current position.\n  // Is there an insertion operation before the last equality.\n\n  var pre_ins = false; // Is there a deletion operation before the last equality.\n\n  var pre_del = false; // Is there an insertion operation after the last equality.\n\n  var post_ins = false; // Is there a deletion operation after the last equality.\n\n  var post_del = false;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n\n      post_ins = post_del = false;\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n\n\n      if (lastequality && (pre_ins && pre_del && post_ins && post_del || lastequality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.\n\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--; // Throw away the equality we just deleted;\n\n        lastequality = null;\n\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--; // Throw away the previous equality.\n\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n\n        changes = true;\n      }\n    }\n\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_cleanupMerge = function (diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            } // Factor out any common suffixies.\n\n\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          } // Delete the offending records and add the merged ones.\n\n\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  } // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\n\n  var changes = false;\n  pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // If shifts were made, the diff needs reordering and another shift sweep.\n\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\n\n\ndiff_match_patch.prototype.diff_xIndex = function (diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n\n    if (diffs[x][0] !== DIFF_DELETE) {\n      // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n\n    if (chars1 > loc) {\n      // Overshot the location.\n      break;\n    }\n\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  } // Was the location was deleted?\n\n\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  } // Add the remaining character length.\n\n\n  return last_chars2 + (loc - last_chars1);\n};\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\n\n\ndiff_match_patch.prototype.diff_prettyHtml = function (diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0]; // Operation (insert, delete, equal)\n\n    var data = diffs[x][1]; // Text of change.\n\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n\n  return html.join('');\n};\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\n\n\ndiff_match_patch.prototype.diff_text1 = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n\n  return text.join('');\n};\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\n\n\ndiff_match_patch.prototype.diff_text2 = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n\n  return text.join('');\n};\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\n\n\ndiff_match_patch.prototype.diff_levenshtein = function (diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\n\n\ndiff_match_patch.prototype.diff_toDelta = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\n\n\ndiff_match_patch.prototype.diff_fromDelta = function (text1, delta) {\n  var diffs = [];\n  var diffsLength = 0; // Keeping our own length var is faster in JS.\n\n  var pointer = 0; // Cursor in text1\n\n  var tokens = delta.split(/\\t/g);\n\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n\n        break;\n\n      case '-': // Fall through.\n\n      case '=':\n        var n = parseInt(param, 10);\n\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n\n        var text = text1.substring(pointer, pointer += n);\n\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n\n        break;\n\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' + tokens[x]);\n        }\n\n    }\n  }\n\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer + ') does not equal source text length (' + text1.length + ').');\n  }\n\n  return diffs;\n}; //  MATCH FUNCTIONS\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\n\n\ndiff_match_patch.prototype.match_main = function (text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\n\n\ndiff_match_patch.prototype.match_bitap_ = function (text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  } // Initialise the alphabet.\n\n\n  var s = this.match_alphabet_(pattern);\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n\n    return accuracy + proximity / dmp.Match_Distance;\n  } // Highest score beyond which we give up.\n\n\n  var score_threshold = this.Match_Threshold; // Is there a nearby exact match? (speedup)\n\n  var best_loc = text.indexOf(pattern, loc);\n\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold); // What about in the other direction? (speedup)\n\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  } // Initialise the bit arrays.\n\n\n  var matchmask = 1 << pattern.length - 1;\n  best_loc = -1;\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n\n      if (d === 0) {\n        // First pass: exact match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        // Subsequent passes: fuzzy match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];\n      }\n\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n\n    last_rd = rd;\n  }\n\n  return best_loc;\n};\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\n\n\ndiff_match_patch.prototype.match_alphabet_ = function (pattern) {\n  var s = {};\n\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n\n  return s;\n}; //  PATCH FUNCTIONS\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\n\n\ndiff_match_patch.prototype.patch_addContext_ = function (patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0; // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  } // Add one chunk for good luck.\n\n\n  padding += this.Patch_Margin; // Add the prefix.\n\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  } // Add the suffix.\n\n\n  var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);\n\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  } // Roll back the start points.\n\n\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length; // Extend the lengths.\n\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\n\n\ndiff_match_patch.prototype.patch_make = function (a, opt_b, opt_c) {\n  var text1, diffs;\n\n  if (typeof a == 'string' && typeof opt_b == 'string' && typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 =\n    /** @type {string} */\n    a;\n    diffs = this.diff_main(text1,\n    /** @type {string} */\n    opt_b, true);\n\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' && typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs =\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    a;\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' && typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 =\n    /** @type {string} */\n    a;\n    diffs =\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    opt_b;\n  } else if (typeof a == 'string' && typeof opt_b == 'string' && opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 =\n    /** @type {string} */\n    a;\n    diffs =\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    opt_c;\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return []; // Get rid of the null case.\n  }\n\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0; // Keeping our own length var is faster in JS.\n\n  var char_count1 = 0; // Number of characters into the text1 string.\n\n  var char_count2 = 0; // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);\n        break;\n\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);\n        break;\n\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0; // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n\n        break;\n    } // Update the current character count.\n\n\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  } // Pick up the leftover patch if not empty.\n\n\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\n\n\ndiff_match_patch.prototype.patch_deepCopy = function (patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n\n  return patchesCopy;\n};\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\n\n\ndiff_match_patch.prototype.patch_apply = function (patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  } // Deep copy the patches so that no changes are made to originals.\n\n\n  patches = this.patch_deepCopy(patches);\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n  this.patch_splitMax(patches); // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n\n  var delta = 0;\n  var results = [];\n\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc);\n\n      if (start_loc != -1) {\n        end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits);\n\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false; // Subtract the delta for this failed patch from subsequent patches.\n\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n\n        if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n\n            if (mod[0] === DIFF_INSERT) {\n              // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              // Deletion\n              text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length));\n            }\n\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  } // Strip the padding off.\n\n\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\n\n\ndiff_match_patch.prototype.patch_addPadding = function (patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  } // Bump all the patches forward.\n\n\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  } // Add some padding on start of first diff.\n\n\n  var patch = patches[0];\n  var diffs = patch.diffs;\n\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength; // Should be 0.\n\n    patch.start2 -= paddingLength; // Should be 0.\n\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  } // Add some padding on end of last diff.\n\n\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\n\n\ndiff_match_patch.prototype.patch_splitMax = function (patches) {\n  var patch_size = this.Match_MaxBits;\n\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n\n    var bigpatch = patches[x]; // Remove the big old patch.\n\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n\n          patch.diffs.push([diff_type, diff_text]);\n\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      } // Compute the head context for the next patch.\n\n\n      precontext = this.diff_text2(patch.diffs);\n      precontext = precontext.substring(precontext.length - this.Patch_Margin); // Append the end context for this patch.\n\n      var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);\n\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\n\n\ndiff_match_patch.prototype.patch_toText = function (patches) {\n  var text = [];\n\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n\n  return text.join('');\n};\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\n\n\ndiff_match_patch.prototype.patch_fromText = function (textline) {\n  var patches = [];\n\n  if (!textline) {\n    return patches;\n  }\n\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {// Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n\n      textPointer++;\n    }\n  }\n\n  return patches;\n};\n/**\n * Class representing one patch operation.\n * @constructor\n */\n\n\ndiff_match_patch.patch_obj = function () {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n\n  this.start1 = null;\n  /** @type {?number} */\n\n  this.start2 = null;\n  /** @type {number} */\n\n  this.length1 = 0;\n  /** @type {number} */\n\n  this.length2 = 0;\n};\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\n\n\ndiff_match_patch.patch_obj.prototype.toString = function () {\n  var coords1, coords2;\n\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = this.start1 + 1 + ',' + this.length1;\n  }\n\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = this.start2 + 1 + ',' + this.length2;\n  }\n\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op; // Escape the body of the patch with %xx notation.\n\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n\n      case DIFF_DELETE:\n        op = '-';\n        break;\n\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n\n  return text.join('').replace(/%20/g, ' ');\n}; // The following export code was added by @ForbesLindesay\n\n\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;"],"sourceRoot":""}