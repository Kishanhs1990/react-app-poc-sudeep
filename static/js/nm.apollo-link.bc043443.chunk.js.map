{"version":3,"sources":["../node_modules/apollo-link/lib/bundle.esm.js"],"names":["_super","LinkError","message","link","_this","call","this","Error","isTerminating","request","length","fromError","errorValue","observer","error","createOperation","starting","operation","context","Object","defineProperty","enumerable","value","next","query","variables","operationName","JSON","stringify","getKey","passthrough","op","forward","of","toLink","handler","ApolloLink","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","first","second","firstLink","nextLink","prototype","execute","transformedOperation","extensions","transformOperation","OPERATION_FIELDS","_i","_a","keys","key","indexOf","validateOperation"],"mappings":"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","file":"static/js/nm.apollo-link.bc043443.chunk.js","sourcesContent":["import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n  var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];\n\n  for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n    var key = _a[_i];\n\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n    }\n  }\n\n  return operation;\n}\n\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n\n    _this.link = link;\n    return _this;\n  }\n\n  return LinkError;\n}(Error);\n\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\n\nfunction toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function next(data) {\n        if (completed) {\n          process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n}\n\nvar makePromise = toPromise;\n\nfunction fromPromise(promise) {\n  return new Observable(function (observer) {\n    promise.then(function (value) {\n      observer.next(value);\n      observer.complete();\n    }).catch(observer.error.bind(observer));\n  });\n}\n\nfunction fromError(errorValue) {\n  return new Observable(function (observer) {\n    observer.error(errorValue);\n  });\n}\n\nfunction transformOperation(operation) {\n  var transformedOperation = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query\n  };\n\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? getOperationName(transformedOperation.query) : '';\n  }\n\n  return transformedOperation;\n}\n\nfunction createOperation(starting, operation) {\n  var context = __assign({}, starting);\n\n  var setContext = function setContext(next) {\n    if (typeof next === 'function') {\n      context = __assign({}, context, next(context));\n    } else {\n      context = __assign({}, context, next);\n    }\n  };\n\n  var getContext = function getContext() {\n    return __assign({}, context);\n  };\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext\n  });\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext\n  });\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: function value() {\n      return getKey(operation);\n    }\n  });\n  return operation;\n}\n\nfunction getKey(operation) {\n  var query = operation.query,\n      variables = operation.variables,\n      operationName = operation.operationName;\n  return JSON.stringify([operationName, query, variables]);\n}\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction empty() {\n  return new ApolloLink(function () {\n    return Observable.of();\n  });\n}\n\nfunction from(links) {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce(function (x, y) {\n    return x.concat(y);\n  });\n}\n\nfunction split(test, left, right) {\n  var leftLink = toLink(left);\n  var rightLink = toLink(right || new ApolloLink(passthrough));\n\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(function (operation) {\n      return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}\n\nvar concat = function concat(first, second) {\n  var firstLink = toLink(first);\n\n  if (isTerminating(firstLink)) {\n    process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n    return firstLink;\n  }\n\n  var nextLink = toLink(second);\n\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(function (operation) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op) || Observable.of();\n      }) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op, forward) || Observable.of();\n      }) || Observable.of();\n    });\n  }\n};\n\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n  };\n\n  ApolloLink.empty = empty;\n  ApolloLink.from = from;\n  ApolloLink.split = split;\n  ApolloLink.execute = execute;\n  return ApolloLink;\n}();\n\nfunction execute(link, operation) {\n  return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n}\n\nexport { ApolloLink, concat, createOperation, empty, execute, from, fromError, fromPromise, makePromise, split, toPromise };"],"sourceRoot":""}