{"version":3,"sources":["../node_modules/apollo-client/bundle.esm.js"],"names":["NetworkStatus","isNetworkRequestInFlight","networkStatus","Observable","_super","apply","this","arguments","prototype","isNonEmptyArray","value","Array","isArray","length","FetchType","generateErrorMessage","err","message","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","ApolloError","_a","extraInfo","_this","call","__proto__","Error","ObservableQuery","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","observers","Set","subscriptions","isTornDown","variables","queryId","generateQueryId","opDef","query","queryName","name","result","Promise","resolve","reject","next","delete","size","removeQuery","setTimeout","subscription","unsubscribe","error","subscribe","currentResult","getCurrentResult","undefined","data","lastResult","lastError","loading","storeValue","policy","getCurrentQueryResult","partial","queryStoreValue","queryStore","get","fetchPolicy","isNetworkFetchPolicy","errorPolicy","errors","ready","updateLastResult","stale","isDifferentFromLastResult","newResult","snapshot","lastResultSnapshot","getLastResult","getLastError","resetLastResults","resetQueryStoreErrors","refetch","fetchQuery","fetchMore","fetchMoreOptions","updateQuery","combinedOptions","qid","normal","then","fetchMoreResult","previousResult","stopQuery","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","add","setOptions","opts","oldFetchPolicy","pollInterval","startPolling","stopPolling","setVariables","fetchResults","tryFetch","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","previousResult_1","query_1","fetchPolicy_1","transform","hasClientExports","getLocalState","addExportedVariables","previousVariables","serverQuery","catch","sub","clear","removeObservableQuery","method","argument","observersWithMethod","obs","push","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","Object","keys","indexOf","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","context","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","prepareContext","getCacheKey","obj","config","dataIdFromObject","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","Directive","enter","node","some","arg","kind","diff","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","str","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","resolveField","fieldResult","fragmentResult","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","directives","directive","resolveSubSelectedArray","item","multiplex","inner","_error","hasOwnProperty","QueryManager","link","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","transformCache","WeakMap","inFlightLinkObservables","pollingInfoByQueryId","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","self","_f","label","setQuery","getVariables","sent","ret","observableQuery","updater","markMutationInit","storeResult","getObservableFromLink","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","cancel","networkResult","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","hasForcedResolvers","newData","queryListenerForObserver","invoke","e","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","errorStatusChanged","diffResult","resultFromStore","has","transformed","transformDocument","forLink","transformForLink","cacheEntry_1","defaultVars","doc","set","watchQuery","transformedOptions","watchedQuery","String","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","watch","callback","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","startQuery","makeObservable","markSubscriptionResult","observablePromise_1","observable","x","queryIdOrObservable","foundObserveableQuery","info","id","deduplication","inFlightLinkObservables_1","operationName","forceFetch","byVariables_1","varJson_1","JSON","stringify","cleanup","cleanupSub_1","of","_next","_error2","_complete","activeNextCount","completed","handler","asyncMap","errorsFromStore","fqrfId","result_1","_error3","prev","newInfo","newContext","checkInFlight","interval","maybeFetch_1","poll_1","clearTimeout","timeout","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","version","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","empty","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","devToolsHookCb","action","state","mutations","dataWithOptimisticResults","extract","readQuery","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","__requestRaw","payload","initQueryManager","fn","onResetStore","filter","onClearStore","restore","serializedState","setLocalStateFragmentMatcher"],"mappings":"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","file":"static/js/nm.apollo-client.56e2098a.chunk.js","sourcesContent":["import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\nvar NetworkStatus;\n\n(function (NetworkStatus) {\n  NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n  NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n  NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n  NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n  NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n  NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n  NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n\nfunction isNetworkRequestInFlight(networkStatus) {\n  return networkStatus < 7;\n}\n\nvar Observable = function (_super) {\n  __extends(Observable, _super);\n\n  function Observable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Observable.prototype[$$observable] = function () {\n    return this;\n  };\n\n  Observable.prototype['@@observable'] = function () {\n    return this;\n  };\n\n  return Observable;\n}(Observable$1);\n\nfunction isNonEmptyArray(value) {\n  return Array.isArray(value) && value.length > 0;\n}\n\nfunction isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var message = '';\n\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nvar FetchType;\n\n(function (FetchType) {\n  FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n  FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n  FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function hasError(storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n};\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        options = _a.options,\n        _b = _a.shouldSubscribe,\n        shouldSubscribe = _b === void 0 ? true : _b;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe;\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    return _this;\n  }\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function next(result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.currentResult = function () {\n    var result = this.getCurrentResult();\n\n    if (result.data === undefined) {\n      result.data = {};\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function () {\n    if (this.isTornDown) {\n      var lastResult = this.lastResult;\n      return {\n        data: !this.lastError && lastResult && lastResult.data || void 0,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n\n    var _a = this.queryManager.getCurrentQueryResult(this),\n        data = _a.data,\n        partial = _a.partial;\n\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n    var result;\n    var fetchPolicy = this.options.fetchPolicy;\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    if (queryStoreValue) {\n      var networkStatus = queryStoreValue.networkStatus;\n\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return {\n          data: void 0,\n          loading: false,\n          networkStatus: networkStatus,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          })\n        };\n      }\n\n      if (queryStoreValue.variables) {\n        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n        this.variables = this.options.variables;\n      }\n\n      result = {\n        data: data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus: networkStatus\n      };\n\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n    } else {\n      var loading = isNetworkFetchPolicy || partial && fetchPolicy !== 'cache-only';\n      result = {\n        data: data,\n        loading: loading,\n        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready\n      };\n    }\n\n    if (!partial) {\n      this.updateLastResult(__assign(__assign({}, result), {\n        stale: false\n      }));\n    }\n\n    return __assign(__assign({}, result), {\n      partial: partial\n    });\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    var snapshot = this.lastResultSnapshot;\n    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && isEqual(snapshot.data, newResult.data));\n  };\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    var queryStore = this.queryManager.queryStore.get(this.queryId);\n\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      this.variables = __assign(__assign({}, this.variables), variables);\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n    }\n\n    return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), {\n      fetchPolicy: fetchPolicy\n    }), FetchType.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 4) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: 'network-only'\n    });\n\n    var qid = this.queryManager.generateQueryId();\n    return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n\n      _this.queryManager.stopQuery(qid);\n\n      return fetchMoreResult;\n    }, function (error) {\n      _this.queryManager.stopQuery(qid);\n\n      throw error;\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function next(subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldFetchPolicy = this.options.fetchPolicy;\n    this.options = __assign(__assign({}, this.options), opts);\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    var fetchPolicy = opts.fetchPolicy;\n    return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' || oldFetchPolicy === 'standby' || fetchPolicy === 'network-only'), opts.fetchResults);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    }\n\n    this.isTornDown = false;\n    variables = variables || this.variables;\n\n    if (!tryFetch && isEqual(variables, this.variables)) {\n      return this.observers.size && fetchResults ? this.result() : Promise.resolve();\n    }\n\n    this.variables = this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.queryManager.fetchQuery(this.queryId, this.options);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n\n    var _a = queryManager.getQueryWithPreviousResult(this.queryId),\n        previousResult = _a.previousResult,\n        variables = _a.variables,\n        document = _a.document;\n\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n\n    if (newResult) {\n      queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n    return previousResult;\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n\n    try {\n      var subObserver = observer._subscription._observer;\n\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n\n    var first = !this.observers.size;\n    this.observers.add(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    if (first) {\n      this.setUpQuery();\n    }\n\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n\n    var _a = this,\n        queryManager = _a.queryManager,\n        queryId = _a.queryId;\n\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery(queryId, this);\n    }\n\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n\n    var onError = function onError(error) {\n      _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false\n      }));\n\n      iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n    };\n\n    queryManager.observeQuery(queryId, this.options, {\n      next: function next(result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          var previousResult_1 = _this.updateLastResult(result);\n\n          var _a = _this.options,\n              query_1 = _a.query,\n              variables = _a.variables,\n              fetchPolicy_1 = _a.fetchPolicy;\n\n          if (queryManager.transform(query_1).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n              var previousVariables = _this.variables;\n              _this.variables = _this.options.variables = variables;\n\n              if (!result.loading && previousResult_1 && fetchPolicy_1 !== 'cache-only' && queryManager.transform(query_1).serverQuery && !isEqual(previousVariables, variables)) {\n                _this.refetch();\n              } else {\n                iterateObserversSafely(_this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(_this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError\n    }).catch(onError);\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\n\nfunction iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}\n\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n  var fetchPolicy = obsQuery.options.fetchPolicy;\n  process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 5) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = function () {\n  function MutationStore() {\n    this.store = {};\n  }\n\n  MutationStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  MutationStore.prototype.get = function (mutationId) {\n    return this.store[mutationId];\n  };\n\n  MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n    this.store[mutationId] = {\n      mutation: mutation,\n      variables: variables || {},\n      loading: true,\n      error: null\n    };\n  };\n\n  MutationStore.prototype.markMutationError = function (mutationId, error) {\n    var mutation = this.store[mutationId];\n\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = error;\n    }\n  };\n\n  MutationStore.prototype.markMutationResult = function (mutationId) {\n    var mutation = this.store[mutationId];\n\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = null;\n    }\n  };\n\n  MutationStore.prototype.reset = function () {\n    this.store = {};\n  };\n\n  return MutationStore;\n}();\n\nvar QueryStore = function () {\n  function QueryStore() {\n    this.store = {};\n  }\n\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n    process.env.NODE_ENV === \"production\" ? invariant(!previousQuery || previousQuery.document === query.document || isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery || previousQuery.document === query.document || isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n    var isSetVariables = false;\n    var previousVariables = null;\n\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    var networkStatus;\n\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var graphQLErrors = [];\n\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    };\n\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    var storeValue = this.store && this.store[queryId];\n\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  };\n\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this;\n\n    Object.keys(this.store).forEach(function (queryId) {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        _this.stopQuery(queryId);\n      } else {\n        _this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  };\n\n  return QueryStore;\n}();\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2, remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n\n      process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' + 'were specified. This means ApolloClient local resolver handling ' + 'has been disabled, and @client directives will be passed through ' + 'to your link chain.');\n    }\n\n    return null;\n  };\n\n  LocalState.prototype.serverQuery = function (document) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var cache = this.cache;\n\n    var newContext = __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function getCacheKey(obj) {\n        if (cache.config) {\n          return cache.config.dataIdFromObject(obj);\n        } else {\n          process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' + 'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n        }\n      }\n    });\n\n    return newContext;\n  };\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function fragmentMatcher() {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function execute(selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2];\n            });\n          });\n        };\n\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }));\n            }\n          }\n        }\n\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n\n          if (!field.selectionSet) {\n            return result;\n          }\n\n          if (result == null) {\n            return result;\n          }\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n\n  return LocalState;\n}();\n\nfunction multiplex(inner) {\n  var observers = new Set();\n  var sub = null;\n  return new Observable(function (observer) {\n    observers.add(observer);\n    sub = sub || inner.subscribe({\n      next: function next(value) {\n        observers.forEach(function (obs) {\n          return obs.next && obs.next(value);\n        });\n      },\n      error: function error(_error) {\n        observers.forEach(function (obs) {\n          return obs.error && obs.error(_error);\n        });\n      },\n      complete: function complete() {\n        observers.forEach(function (obs) {\n          return obs.complete && obs.complete();\n        });\n      }\n    });\n    return function () {\n      if (observers.delete(observer) && !observers.size && sub) {\n        sub.unsubscribe();\n        sub = null;\n      }\n    };\n  });\n}\n\nfunction asyncMap(observable, mapFn) {\n  return new Observable(function (observer) {\n    var _next = observer.next,\n        _error2 = observer.error,\n        _complete = observer.complete;\n    var activeNextCount = 0;\n    var completed = false;\n    var handler = {\n      next: function next(value) {\n        ++activeNextCount;\n        new Promise(function (resolve) {\n          resolve(mapFn(value));\n        }).then(function (result) {\n          --activeNextCount;\n          _next && _next.call(observer, result);\n          completed && handler.complete();\n        }, function (e) {\n          --activeNextCount;\n          _error2 && _error2.call(observer, e);\n        });\n      },\n      error: function error(e) {\n        _error2 && _error2.call(observer, e);\n      },\n      complete: function complete() {\n        completed = true;\n\n        if (!activeNextCount) {\n          _complete && _complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        store = _a.store,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d,\n        _e = _a.clientAwareness,\n        clientAwareness = _e === void 0 ? {} : _e,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore();\n    this.clientAwareness = {};\n    this.idCounter = 1;\n    this.queries = new Map();\n    this.fetchQueryRejectFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.inFlightLinkObservables = new Map();\n    this.pollingInfoByQueryId = new Map();\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: store.getCache()\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n    });\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, self;\n\n      var _this = this;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateQueryId();\n            mutation = this.transform(mutation).document;\n            this.setQuery(mutationId, function () {\n              return {\n                document: mutation\n              };\n            });\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            generateUpdateQueriesInfo = function generateUpdateQueriesInfo() {\n              var ret = {};\n\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n\n                  if (observableQuery) {\n                    var queryName = observableQuery.queryName;\n\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        query: _this.queryStore.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n\n              return ret;\n            };\n\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n            this.dataStore.markMutationInit({\n              mutationId: mutationId,\n              document: mutation,\n              variables: variables,\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n              optimisticResponse: optimisticResponse\n            });\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function next(result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n\n                  self.mutationStore.markMutationResult(mutationId);\n\n                  if (fetchPolicy !== 'no-cache') {\n                    self.dataStore.markMutationResult({\n                      mutationId: mutationId,\n                      result: result,\n                      document: mutation,\n                      variables: variables,\n                      updateQueries: generateUpdateQueriesInfo(),\n                      update: updateWithProxyFn\n                    });\n                  }\n\n                  storeResult = result;\n                },\n                error: function error(err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n                  self.setQuery(mutationId, function () {\n                    return {\n                      document: null\n                    };\n                  });\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function complete() {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n\n                  var refetchQueryPromises = [];\n\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n\n                          if (observableQuery && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    self.setQuery(mutationId, function () {\n                      return {\n                        document: null\n                      };\n                    });\n\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n\n                    resolve(storeResult);\n                  });\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n            query = this.transform(options.query).document;\n            variables = this.getVariables(query, options.variables);\n            if (!this.transform(query).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(query, variables, context)];\n\n          case 1:\n            variables = _e.sent();\n            _e.label = 2;\n\n          case 2:\n            options = __assign(__assign({}, options), {\n              variables: variables\n            });\n            isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n            needToFetch = isNetworkOnly;\n\n            if (!isNetworkOnly) {\n              _d = this.dataStore.getCache().diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false\n              }), complete = _d.complete, result = _d.result;\n              needToFetch = !complete || fetchPolicy === 'cache-and-network';\n              storeResult = result;\n            }\n\n            shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n            if (hasDirectives(['live'], query)) shouldFetch = true;\n            requestId = this.idCounter++;\n            cancel = fetchPolicy !== 'no-cache' ? this.updateQueryWatch(queryId, query, options) : undefined;\n            this.setQuery(queryId, function () {\n              return {\n                document: query,\n                lastRequestId: requestId,\n                invalidated: true,\n                cancel: cancel\n              };\n            });\n            this.invalidate(fetchMoreForQueryId);\n            this.queryStore.initQuery({\n              queryId: queryId,\n              document: query,\n              storePreviousVariables: shouldFetch,\n              variables: variables,\n              isPoll: fetchType === FetchType.poll,\n              isRefetch: fetchType === FetchType.refetch,\n              metadata: metadata,\n              fetchMoreForQueryId: fetchMoreForQueryId\n            });\n            this.broadcastQueries();\n\n            if (shouldFetch) {\n              networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId\n              }).catch(function (error) {\n                if (isApolloError(error)) {\n                  throw error;\n                } else {\n                  if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n                    _this.invalidate(queryId);\n\n                    _this.invalidate(fetchMoreForQueryId);\n\n                    _this.broadcastQueries();\n                  }\n\n                  throw new ApolloError({\n                    networkError: error\n                  });\n                }\n              });\n\n              if (fetchPolicy !== 'cache-and-network') {\n                return [2, networkResult];\n              }\n\n              networkResult.catch(function () {});\n            }\n\n            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n            this.invalidate(queryId);\n            this.invalidate(fetchMoreForQueryId);\n\n            if (this.transform(query).hasForcedResolvers) {\n              return [2, this.localState.runResolvers({\n                document: query,\n                remoteResult: {\n                  data: storeResult\n                },\n                context: context,\n                variables: variables,\n                onlyRunForcedResolvers: true\n              }).then(function (result) {\n                _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n\n                _this.broadcastQueries();\n\n                return result;\n              })];\n            }\n\n            this.broadcastQueries();\n            return [2, {\n              data: storeResult\n            }];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n    var fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables,\n        errorPolicy = _a.errorPolicy;\n\n    if (fetchPolicy === 'no-cache') {\n      this.setQuery(queryId, function () {\n        return {\n          newData: {\n            result: result.data,\n            complete: true\n          }\n        };\n      });\n    } else {\n      this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n    }\n  };\n\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n\n    function invoke(method, argument) {\n      if (observer[method]) {\n        try {\n          observer[method](argument);\n        } catch (e) {\n          process.env.NODE_ENV === \"production\" || invariant.error(e);\n        }\n      } else if (method === 'error') {\n        process.env.NODE_ENV === \"production\" || invariant.error(argument);\n      }\n    }\n\n    return function (queryStoreValue, newData) {\n      _this.invalidate(queryId, false);\n\n      if (!queryStoreValue) return;\n\n      var _a = _this.getQuery(queryId),\n          observableQuery = _a.observableQuery,\n          document = _a.document;\n\n      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;\n      if (fetchPolicy === 'standby') return;\n      var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n      var lastResult = observableQuery && observableQuery.getLastResult();\n      var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);\n      var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n\n      if (loading && !shouldNotifyIfLoading) {\n        return;\n      }\n\n      var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n      var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || 'none';\n\n      if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n        return invoke('error', new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        }));\n      }\n\n      try {\n        var data = void 0;\n        var isMissing = void 0;\n\n        if (newData) {\n          if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n            _this.setQuery(queryId, function () {\n              return {\n                newData: null\n              };\n            });\n          }\n\n          data = newData.result;\n          isMissing = !newData.complete;\n        } else {\n          var lastError = observableQuery && observableQuery.getLastError();\n          var errorStatusChanged = errorPolicy !== 'none' && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;\n\n          if (lastResult && lastResult.data && !errorStatusChanged) {\n            data = lastResult.data;\n            isMissing = false;\n          } else {\n            var diffResult = _this.dataStore.getCache().diff({\n              query: document,\n              variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n              returnPartialData: true,\n              optimistic: true\n            });\n\n            data = diffResult.result;\n            isMissing = !diffResult.complete;\n          }\n        }\n\n        var stale = isMissing && !(options.returnPartialData || fetchPolicy === 'cache-only');\n        var resultFromStore = {\n          data: stale ? lastResult && lastResult.data : data,\n          loading: loading,\n          networkStatus: queryStoreValue.networkStatus,\n          stale: stale\n        };\n\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          resultFromStore.errors = queryStoreValue.graphQLErrors;\n        }\n\n        invoke('next', resultFromStore);\n      } catch (networkError) {\n        invoke('error', new ApolloError({\n          networkError: networkError\n        }));\n      }\n    };\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var cache = this.dataStore.getCache();\n      var transformed = cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n\n      var add = function add(doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    options.variables = this.getVariables(options.query, options.variables);\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var transformedOptions = __assign({}, options);\n\n    return new ObservableQuery({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    return new Promise(function (resolve, reject) {\n      var watchedQuery = _this.watchQuery(options, false);\n\n      _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n\n      watchedQuery.result().then(resolve, reject).then(function () {\n        return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n      });\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.idCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(queryId);\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var listeners = _a.listeners;\n      listeners.add(listener);\n      return {\n        invalidated: false\n      };\n    });\n  };\n\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n\n    var previousResult = function previousResult() {\n      var previousResult = null;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function callback(newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  };\n\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    });\n  };\n\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var cancel = this.getQuery(queryId).cancel;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n    if (cancel) cancel();\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n    return this.dataStore.reset();\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n\n      if (observableQuery) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        _this.setQuery(queryId, function () {\n          return {\n            newData: null\n          };\n        });\n\n        _this.invalidate(queryId);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n    this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n    return this.fetchQuery(queryId, options);\n  };\n\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options).catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function makeObservable(variables) {\n      return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          _this.dataStore.markSubscriptionResult(result, query, variables);\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n    this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        returnPartialData = _a.returnPartialData;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData;\n\n    if (newData && newData.complete) {\n      return {\n        data: newData.result,\n        partial: false\n      };\n    }\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return {\n        data: undefined,\n        partial: false\n      };\n    }\n\n    var _b = this.dataStore.getCache().diff({\n      query: query,\n      variables: variables,\n      previousResult: lastResult ? lastResult.data : undefined,\n      returnPartialData: true,\n      optimistic: optimistic\n    }),\n        result = _b.result,\n        complete = _b.complete;\n\n    return {\n      data: complete || returnPartialData ? result : void 0,\n      partial: !complete\n    };\n  };\n\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n      process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables: variables,\n      document: query\n    };\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    var _this = this;\n\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (info.invalidated) {\n        info.listeners.forEach(function (listener) {\n          if (listener) {\n            listener(_this.queryStore.get(id), info.newData);\n          }\n        });\n      }\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    if (deduplication === void 0) {\n      deduplication = this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _a = this,\n          inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n          link = _a.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n\n          var cleanup = function cleanup() {\n            byVariables_1.delete(varJson_1);\n            if (!byVariables_1.size) inFlightLinkObservables_1.delete(serverQuery);\n            cleanupSub_1.unsubscribe();\n          };\n\n          var cleanupSub_1 = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup\n          });\n        }\n      } else {\n        observable = multiplex(execute(link, operation));\n      }\n    } else {\n      observable = Observable.of({\n        data: {}\n      });\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n\n    var requestId = _a.requestId,\n        queryId = _a.queryId,\n        document = _a.document,\n        options = _a.options,\n        fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? 'none' : _b,\n        fetchPolicy = options.fetchPolicy;\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      var observable = _this.getObservableFromLink(document, options.context, variables);\n\n      var fqrfId = \"fetchRequest:\" + queryId;\n\n      _this.fetchQueryRejectFns.set(fqrfId, reject);\n\n      var cleanup = function cleanup() {\n        _this.fetchQueryRejectFns.delete(fqrfId);\n\n        _this.setQuery(queryId, function (_a) {\n          var subscriptions = _a.subscriptions;\n          subscriptions.delete(subscription);\n        });\n      };\n\n      var subscription = observable.map(function (result) {\n        if (requestId >= _this.getQuery(queryId).lastRequestId) {\n          _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n\n          _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n\n          _this.invalidate(queryId);\n\n          _this.invalidate(fetchMoreForQueryId);\n\n          _this.broadcastQueries();\n        }\n\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          resultFromStore = result.data;\n        } else {\n          var _a = _this.dataStore.getCache().diff({\n            variables: variables,\n            query: document,\n            optimistic: false,\n            returnPartialData: true\n          }),\n              result_1 = _a.result,\n              complete = _a.complete;\n\n          if (complete || options.returnPartialData) {\n            resultFromStore = result_1;\n          }\n        }\n      }).subscribe({\n        error: function error(_error3) {\n          cleanup();\n          reject(_error3);\n        },\n        complete: function complete() {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false\n          });\n        }\n      });\n\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        subscriptions.add(subscription);\n      });\n    });\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || {\n      listeners: new Set(),\n      invalidated: false,\n      document: null,\n      newData: null,\n      lastRequestId: 1,\n      observableQuery: null,\n      subscriptions: new Set()\n    };\n  };\n\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n\n    var newInfo = __assign(__assign({}, prev), updater(prev));\n\n    this.queries.set(queryId, newInfo);\n  };\n\n  QueryManager.prototype.invalidate = function (queryId, invalidated) {\n    if (invalidated === void 0) {\n      invalidated = true;\n    }\n\n    if (queryId) {\n      this.setQuery(queryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n    var _this = this;\n\n    var pollInterval = options.pollInterval;\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n\n    if (!this.ssrMode) {\n      var info = this.pollingInfoByQueryId.get(queryId);\n\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, info = {});\n      }\n\n      info.interval = pollInterval;\n      info.options = __assign(__assign({}, options), {\n        fetchPolicy: 'network-only'\n      });\n\n      var maybeFetch_1 = function maybeFetch_1() {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n\n        if (info) {\n          if (_this.checkInFlight(queryId)) {\n            poll_1();\n          } else {\n            _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n          }\n        }\n      };\n\n      var poll_1 = function poll_1() {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch_1, info.interval);\n        }\n      };\n\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n\n      poll_1();\n    }\n\n    return queryId;\n  };\n\n  QueryManager.prototype.stopPollingQuery = function (queryId) {\n    this.pollingInfoByQueryId.delete(queryId);\n  };\n\n  return QueryManager;\n}();\n\nvar DataStore = function () {\n  function DataStore(initialCache) {\n    this.cache = initialCache;\n  }\n\n  DataStore.prototype.getCache = function () {\n    return this.cache;\n  };\n\n  DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n    if (ignoreErrors === void 0) {\n      ignoreErrors = false;\n    }\n\n    var writeWithErrors = !graphQLResultHasError(result);\n\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markMutationInit = function (mutation) {\n    var _this = this;\n\n    if (mutation.optimisticResponse) {\n      var optimistic_1;\n\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic_1 = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic_1 = mutation.optimisticResponse;\n      }\n\n      this.cache.recordOptimisticTransaction(function (c) {\n        var orig = _this.cache;\n        _this.cache = c;\n\n        try {\n          _this.markMutationResult({\n            mutationId: mutation.mutationId,\n            result: {\n              data: optimistic_1\n            },\n            document: mutation.document,\n            variables: mutation.variables,\n            updateQueries: mutation.updateQueries,\n            update: mutation.update\n          });\n        } finally {\n          _this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  };\n\n  DataStore.prototype.markMutationResult = function (mutation) {\n    var _this = this;\n\n    if (!graphQLResultHasError(mutation.result)) {\n      var cacheWrites_1 = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      }];\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        Object.keys(updateQueries_1).forEach(function (id) {\n          var _a = updateQueries_1[id],\n              query = _a.query,\n              updater = _a.updater;\n\n          var _b = _this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _b.result,\n              complete = _b.complete;\n\n          if (complete) {\n            var nextQueryResult = tryFunctionOrLogError(function () {\n              return updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables\n              });\n            });\n\n            if (nextQueryResult) {\n              cacheWrites_1.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables\n              });\n            }\n          }\n        });\n      }\n\n      this.cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n        var update = mutation.update;\n\n        if (update) {\n          tryFunctionOrLogError(function () {\n            return update(c, mutation.result);\n          });\n        }\n      });\n    }\n  };\n\n  DataStore.prototype.markMutationComplete = function (_a) {\n    var mutationId = _a.mutationId,\n        optimisticResponse = _a.optimisticResponse;\n\n    if (optimisticResponse) {\n      this.cache.removeOptimistic(mutationId);\n    }\n  };\n\n  DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables: variables,\n      query: document\n    });\n  };\n\n  DataStore.prototype.reset = function () {\n    return this.cache.reset();\n  };\n\n  return DataStore;\n}();\n\nvar version = \"2.6.8\";\nvar hasSuggestedDevtools = false;\n\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var cache = options.cache,\n        _a = options.ssrMode,\n        ssrMode = _a === void 0 ? false : _a,\n        _b = options.ssrForceFetchDelay,\n        ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n        connectToDevTools = options.connectToDevTools,\n        _c = options.queryDeduplication,\n        queryDeduplication = _c === void 0 ? true : _c,\n        defaultOptions = options.defaultOptions,\n        _d = options.assumeImmutableResults,\n        assumeImmutableResults = _d === void 0 ? false : _d,\n        resolvers = options.resolvers,\n        typeDefs = options.typeDefs,\n        fragmentMatcher = options.fragmentMatcher,\n        clientAwarenessName = options.name,\n        clientAwarenessVersion = options.version;\n    var link = options.link;\n\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n\n    if (!link || !cache) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" + \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" + \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: function onBroadcast() {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.queryStore.getStore(),\n              mutations: _this.queryManager.mutationStore.getStore()\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      }\n    });\n  }\n\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n    }\n\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.watchQuery(options);\n  };\n\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = __assign(__assign({}, this.defaultOptions.query), options);\n    }\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 2) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.query(options);\n  };\n\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = __assign(__assign({}, this.defaultOptions.mutate), options);\n    }\n\n    return this.queryManager.mutate(options);\n  };\n\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.cache.readQuery(options, optimistic);\n  };\n\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.cache.readFragment(options, optimistic);\n  };\n\n  ApolloClient.prototype.writeQuery = function (options) {\n    var result = this.cache.writeQuery(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.writeFragment = function (options) {\n    var result = this.cache.writeFragment(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.writeData = function (options) {\n    var result = this.cache.writeData(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n\n  ApolloClient.prototype.initQueryManager = function () {\n    process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' + 'and it will be removed from ApolloClient in version 3.0.');\n    return this.queryManager;\n  };\n\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n\n  return ApolloClient;\n}();\n\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };"],"sourceRoot":""}