{"version":3,"sources":["../node_modules/apollo-cache/lib/bundle.esm.js"],"names":["queryFromPojo","obj","kind","definitions","operation","name","value","selectionSet","selectionSetFromObj","Array","isArray","selections","Object","keys","forEach","key","field","undefined","push","Cache","justTypenameQuery","variableDefinitions","directives","alias","arguments","ApolloCache","prototype","transformDocument","document","transformForLink","readQuery","options","optimistic","this","read","query","variables","readFragment","fragment","fragmentName","rootId","id","writeQuery","write","dataId","result","data","writeFragment","writeData","_a","typename","typenameResult","e","__typename","dataToWrite","assign","typeCondition"],"mappings":"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","file":"static/js/nm.apollo-cache.6f80bdf8.chunk.js","sourcesContent":["import { getFragmentQueryDocument } from 'apollo-utilities';\n\nfunction queryFromPojo(obj) {\n  var op = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [op]\n  };\n  return out;\n}\n\nfunction fragmentFromPojo(obj, typename) {\n  var frag = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType'\n      }\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [frag]\n  };\n  return out;\n}\n\nfunction selectionSetFromObj(obj) {\n  if (typeof obj === 'number' || typeof obj === 'boolean' || typeof obj === 'string' || typeof obj === 'undefined' || obj === null) {\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    return selectionSetFromObj(obj[0]);\n  }\n\n  var selections = [];\n  Object.keys(obj).forEach(function (key) {\n    var nestedSelSet = selectionSetFromObj(obj[key]);\n    var field = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key\n      },\n      selectionSet: nestedSelSet || undefined\n    };\n    selections.push(field);\n  });\n  var selectionSet = {\n    kind: 'SelectionSet',\n    selections: selections\n  };\n  return selectionSet;\n}\n\nvar justTypenameQuery = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: null,\n    variableDefinitions: null,\n    directives: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        alias: null,\n        name: {\n          kind: 'Name',\n          value: '__typename'\n        },\n        arguments: [],\n        directives: [],\n        selectionSet: null\n      }]\n    }\n  }]\n};\n\nvar ApolloCache = function () {\n  function ApolloCache() {}\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName)\n    });\n  };\n\n  ApolloCache.prototype.writeData = function (_a) {\n    var id = _a.id,\n        data = _a.data;\n\n    if (typeof id !== 'undefined') {\n      var typenameResult = null;\n\n      try {\n        typenameResult = this.read({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery\n        });\n      } catch (e) {}\n\n      var __typename = typenameResult && typenameResult.__typename || '__ClientData';\n\n      var dataToWrite = Object.assign({\n        __typename: __typename\n      }, data);\n      this.writeFragment({\n        id: id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite\n      });\n    } else {\n      this.writeQuery({\n        query: queryFromPojo(data),\n        data: data\n      });\n    }\n  };\n\n  return ApolloCache;\n}();\n\nvar Cache;\n\n(function (Cache) {})(Cache || (Cache = {}));\n\nexport { ApolloCache, Cache };"],"sourceRoot":""}