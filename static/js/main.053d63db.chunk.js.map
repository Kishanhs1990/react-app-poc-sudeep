{"version":3,"sources":["../external \"React\"","serviceWorker.js","Services/metadataService.js","Router/CreateRouteWithSubRoutes.js","Router/RouteSwitcher.js","Views/ContinentsSolution/ContinentsSolutionRoutes.js","Views/ContinentsSolution/ContinentsSolutionView.jsx","Router/Routes.js","Components/App/AppComponent.jsx","Store/Middlewares/ClientMiddleware.js","Store/Middlewares/ApolloMiddleware.js","Router/History.js","Store/Reducers/ContinentsReducer.js","Services/CustomStringParserService.js","Store/Reducers/StringParserReducer.js","Store/Reducers/RootReducer.js","Store/ConfigureStore.js","Services/WebFontService.js","index.jsx","../external \"ReactDOM\"","Store/Types/index.js","Store/Types/DefaultTypes.js","Store/Types/ContinentsTypes.js","Store/Types/CountriesTypes.js","Store/Types/StringParserTypes.js","Store/Actions/ContinentsActions.js","Store/Actions/StringParserActions.js","Store/Actions/index.js","Store/Queries/Continents.graphql","Store/Queries/Countries.graphql"],"names":["module","exports","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","meta","charset","name","content","httpEquiv","link","rel","href","process","CreateRouteWithSubRoutes","route","path","render","props","component","routes","RouteSwitcher","map","index","key","SelectContinentComponent","lazy","NotFoundComponent","ContinentsSolutionRoutes","exact","ContinentsSolutionView","titleName","forEach","urlString","actualTitle","pathname","includes","className","Routes","LoaderComponent","WrapperComponent","HeaderComponent","FooterComponent","AppComponent","this","parserLoading","parser","loading","continentsLoading","continents","appComponentClassList","push","title","defaultMeta","Suspense","fallback","join","show","PureComponent","withRouter","connect","dispatch","actions","bindActionCreators","StringParserActions","clientMiddleware","httpClient","apolloClient","getState","next","action","promise","types","handler","HTTP_CLIENT","rest","actionPromise","REQUEST","SUCCESS","SUCCESS_DEFAULT","FAILURE","FAILURE_DEFAULT","type","APOLLO_CLIENT","result","data","message","cache","InMemoryCache","httpLink","HttpLink","uri","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","subscribe","bind","complete","unsubscribe","ApolloClient","from","withClientState","defaults","isConnected","resolvers","Mutation","updateNetworkStatus","_","writeData","history","createBrowserHistory","basename","initialState","selectedContinent","countriesList","selectedCountry","ContinentsReducer","code","countries","newCountriesList","country","replaceValueEncodings","jsonToParse","accumulator","newObject","Object","entries","value","copyOfKey","copyOfValue","indexOf","split","splitValues","dateStringToISO","between","toString","inq","eq","accumulatedObject","dateString","endOfDay","dateObj","Date","Number","isNaN","getTime","setUTCHours","toISOString","performCustomStringParse","textToParse","length","jsonString","replace","trim","item","p1","p2","p3","parsedJSONObj","JSON","parse","stringify","err","parsedResultJSON","StringParserReducer","appReducer","combineReducers","router","connectRouter","RootReducer","undefined","axios","create","baseURL","withCredentials","headers","Accept","configureStore","options","logger","enhancers","middleware","ReduxThunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","store","createStore","configureWebFontService","webFontLoader","google","families","URL","origin","addEventListener","fetch","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","sw","ReactDOM","document","getElementById","fetchContinentsList","client","query","ListAllContinents","selectContinent","continent","fetchCountryDetails","countryDetails","variables","clearContinents","parseToJSON","clearOutcome","doc","loc","source","definitionRefs","findOperation","i","definitions","element","oneQuery","operationName","newDoc","kind","hasOwnProperty","opRefs","Set","allRefs","newRefs","refName","add","size","prevRefs","has","childRef","op","def","refs","collectFragmentReferences","node","selectionSet","selections","selection","variableDefinitions"],"mappings":"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","file":"static/js/main.053d63db.chunk.js","sourcesContent":["module.exports = React;","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const title = 'React-App-POC-Sudeep';\n\nexport const meta = [\n  {\n    charset: 'UTF-8'\n  },\n  {\n    name: 'viewport',\n    content: 'width=device-width, initial-scale=1, shrink-to-fit=no'\n  },\n  {\n    httpEquiv: 'X-UA-Compatible',\n    content: 'IE=edge'\n  },\n  {\n    name: 'description',\n    content: 'Wedding services and planning partners'\n  }\n];\n\nexport const link = [\n  {\n    rel: 'shortcut icon',\n    href: `${process.env.PUBLIC_URL}/favicon.ico?v1`\n  }\n];\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CreateRouteWithSubRoutes = route => (\n  <Route path={route.path} render={props => <route.component {...props} routes={route.routes} />} />\n);\n\nexport default CreateRouteWithSubRoutes;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/jsx-props-no-spreading */\n\nimport React from 'react';\nimport { Switch } from 'react-router-dom';\nimport CreateRouteWithSubRoutes from './CreateRouteWithSubRoutes';\n\nconst RouteSwitcher = props => {\n  const { routes } = props;\n  return (\n    <>\n      <Switch>\n        {routes.map((route, index) => (\n          <CreateRouteWithSubRoutes key={index} {...route} />\n        ))}\n      </Switch>\n    </>\n  );\n};\n\nexport default RouteSwitcher;\n","import React from 'react';\n\nconst SelectContinentComponent = React.lazy(() =>\n  import('../../Components/SelectContinent/SelectContinentComponent')\n);\nconst NotFoundComponent = React.lazy(() => import('../../Components/NotFound/NotFoundComponent'));\n\nconst ContinentsSolutionRoutes = [\n  {\n    path: '/continents(/select-continent)?',\n    exact: true,\n    component: SelectContinentComponent\n  },\n  {\n    path: '/continents/country-details',\n    component: NotFoundComponent\n  },\n  {\n    path: '/continents/*',\n    component: NotFoundComponent\n  }\n];\n\nexport default ContinentsSolutionRoutes;\n","import React from 'react';\n\nimport RouteSwitcher from '../../Router/RouteSwitcher';\nimport ContinentsSolutionRoutes from './ContinentsSolutionRoutes';\n\nconst ContinentsSolutionView = () => {\n  const labels = [\n    ['/continents/select-continent', 'Select Continent'],\n    ['/continents/country-details', 'Country Details']\n  ];\n  let titleName = 'Continents';\n  labels.forEach(([urlString, actualTitle]) => {\n    if (window.location.pathname.includes(urlString)) titleName = actualTitle;\n  });\n  return (\n    <div className=\"box\">\n      <div className=\"title-box\">{titleName}</div>\n      <div className=\"box-content\">\n        <RouteSwitcher routes={ContinentsSolutionRoutes} />\n      </div>\n    </div>\n  );\n};\n\nexport default ContinentsSolutionView;\n","import React from 'react';\n\nimport { ContinentsSolutionView } from '../Views/ContinentsSolution';\n\nconst ProblemComponent = React.lazy(() => import('../Components/Problem/ProblemComponent'));\nconst StringParserComponent = React.lazy(() =>\n  import('../Components/StringParser/StringParserComponent')\n);\nconst HelpComponent = React.lazy(() => import('../Components/Help/HelpComponent'));\nconst NotFoundComponent = React.lazy(() => import('../Components/NotFound/NotFoundComponent'));\n\nconst Routes = [\n  {\n    path: '/',\n    exact: true,\n    component: ProblemComponent\n  },\n  {\n    path: '/string-parse',\n    component: StringParserComponent\n  },\n  {\n    path: '/continents',\n    component: ContinentsSolutionView\n  },\n  {\n    path: '/help',\n    component: HelpComponent\n  },\n  {\n    path: '*',\n    component: NotFoundComponent\n  }\n];\n\nexport default Routes;\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Helmet from 'react-helmet';\nimport * as defaultMeta from '../../Services/metadataService';\n\nimport RouteSwitcher from '../../Router/RouteSwitcher';\nimport Routes from '../../Router/Routes';\nimport { StringParserActions } from '../../Store/Actions';\nimport './AppComponent.scss';\n\nconst LoaderComponent = React.lazy(() => import('../Loader/LoaderComponent'));\nconst WrapperComponent = React.lazy(() => import('../Wrapper/WrapperComponent'));\nconst HeaderComponent = React.lazy(() => import('../Header/HeaderComponent'));\nconst FooterComponent = React.lazy(() => import('../Footer/FooterComponent'));\n\nconst mapStateToProps = state => ({\n  parser: state.parser,\n  continents: state.continents\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({ ...StringParserActions }, dispatch)\n});\n\nclass AppComponent extends React.PureComponent {\n  render() {\n    const {\n      parser: { loading: parserLoading },\n      continents: { loading: continentsLoading }\n    } = this.props;\n    const loading = parserLoading || continentsLoading;\n    const appComponentClassList = ['app'];\n    if (loading) appComponentClassList.push('loader-active');\n    return (\n      <>\n        <Helmet title={defaultMeta.title} meta={defaultMeta.meta} link={defaultMeta.link} />\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <div className={appComponentClassList.join(' ')}>\n            <HeaderComponent />\n            <WrapperComponent>\n              <RouteSwitcher routes={Routes} />\n            </WrapperComponent>\n            <FooterComponent />\n          </div>\n          <LoaderComponent show={loading} />\n        </React.Suspense>\n      </>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AppComponent));\n","/* eslint-disable no-console */\nimport { SUCCESS_DEFAULT, FAILURE_DEFAULT, APOLLO_CLIENT, HTTP_CLIENT } from '../Types';\n\nexport default function clientMiddleware(httpClient, apolloClient) {\n  return ({ dispatch, getState }) => {\n    return next => action => {\n      if (typeof action === 'function') {\n        return action(dispatch, getState);\n      }\n      const { promise, types, handler = HTTP_CLIENT, ...rest } = action;\n      if (!promise) {\n        return next(action);\n      }\n      const [REQUEST, SUCCESS = SUCCESS_DEFAULT, FAILURE = FAILURE_DEFAULT] = types;\n      next({ ...rest, type: REQUEST });\n\n      let actionPromise;\n      if (handler === APOLLO_CLIENT) {\n        actionPromise = promise(apolloClient, { ...getState() });\n      } else if (handler === HTTP_CLIENT) {\n        actionPromise = promise(httpClient, { ...getState() });\n      } else {\n        console.error('UNKNOWN/UNCONFIGURED PROMISE HANDLER: ', handler);\n        return null;\n      }\n      actionPromise\n        .then(\n          result => {\n            if (result && result.data) {\n              next({ ...rest, result: result.data, type: SUCCESS });\n            } else if (result && result.error && result.error.message) {\n              const error = {\n                message: result.error.message\n              };\n              next({ ...rest, error, type: FAILURE });\n            } else {\n              const error = {\n                message: 'Unexpected error occured, try again later'\n              };\n              next({ ...rest, error, type: FAILURE });\n            }\n          },\n          error => {\n            error.message = 'Unexpected error occured, try again later';\n            next({ ...rest, error, type: FAILURE });\n          }\n        )\n        .catch(error => {\n          console.error('MIDDLEWARE ERROR:', error);\n        });\n\n      return actionPromise;\n    };\n  };\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\nimport { ApolloLink, Observable } from 'apollo-link';\n// import { onError } from 'apollo-link-error';\n\nconst cache = new InMemoryCache();\n// {\n//   cacheRedirects: {\n//     Query: {\n//       movie: (_, { id }, { getCacheKey }) =>\n//         getCacheKey({ __typename: 'Movie', id });\n//     }\n//   }\n// });\n\n// const request = async (operation) => {\n//   const token = await AsyncStorage.getItem('token');\n//   operation.setContext({\n//     headers: {\n//       authorization: token\n//     }\n//   });\n// };\n\n// const errorHandler = ({ graphQLErrors, networkError }) => {\n//   if (graphQLErrors) {\n//     sendToLoggingService(graphQLErrors);\n//   }\n//   if (networkError) {\n//     // logoutUser();\n//   }\n// };\n\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_GQL_URL\n  // credentials: 'include'\n});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle;\n      // .then(oper => request(oper))\n      Promise.resolve(operation)\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst apolloClient = new ApolloClient({\n  link: ApolloLink.from([\n    // onError(errorHandler),\n    requestLink,\n    withClientState({\n      defaults: {\n        isConnected: true\n      },\n      resolvers: {\n        Mutation: {\n          updateNetworkStatus: (_, { isConnected }, { cache: networkCache }) => {\n            networkCache.writeData({ data: { isConnected } });\n            return null;\n          }\n        }\n      },\n      cache\n    }),\n    httpLink\n  ]),\n  cache\n});\n\nexport default apolloClient;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n\nexport default history;\n","import * as types from '../Types';\n\nconst initialState = {\n  continents: [],\n  selectedContinent: {},\n  countriesList: [],\n  selectedCountry: {},\n  loading: null,\n  error: ''\n};\n\nconst ContinentsReducer = (state = initialState, action) => {\n  let result;\n  switch (action.type) {\n    case types.LOAD_CONTINENTS_LIST:\n      return {\n        ...state,\n        continents: [],\n        loading: true,\n        error: ''\n      };\n\n    case types.LOAD_CONTINENTS_LIST_SUCCESS: {\n      result = action.result || [];\n      return {\n        ...state,\n        continents: result.continents,\n        loading: false\n      };\n    }\n\n    case types.LOAD_CONTINENTS_LIST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error.message\n      };\n\n    case types.CLEAR_CONTINENTS_LIST:\n      return {\n        ...state,\n        continents: [],\n        selectedContinent: {},\n        countriesList: []\n      };\n\n    case types.SELECT_CONTINENT: {\n      result = action.result || { name: '', code: '?', countries: [] };\n      return {\n        ...state,\n        selectedContinent: { ...result },\n        countriesList: result.countries\n      };\n    }\n\n    case types.FETCH_COUNTRY_RESULT:\n      return {\n        ...state,\n        selectedCountry: {},\n        loading: true,\n        error: ''\n      };\n\n    case types.FETCH_COUNTRY_RESULT_SUCCESS: {\n      result = action.result || [];\n      const newCountriesList = state.countriesList.map(country => {\n        if (country.code === result.country.code) return result.country;\n        return country;\n      });\n      return {\n        ...state,\n        selectedCountry: result.country,\n        countriesList: newCountriesList,\n        loading: false\n      };\n    }\n\n    case types.FETCH_COUNTRY_RESULT_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error.message\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default ContinentsReducer;\n","const performCustomStringParse = (textToParse, accumulator) => {\n  if (textToParse === '' || textToParse.length === 0) return null;\n  const commaAdded = textToParse\n    .replace(/(?:\\r\\n|\\r|\\n)/g, ',')\n    .trim()\n    .replace(/,+$/g, '');\n  const items = commaAdded.split(',');\n  const jsonString = items\n    .map(item => {\n      return item.replace(/([^:]+)(:)(.+$)/, (match, p1, p2, p3) => {\n        return `\"${p1.trim()}\": \"${p3.trim()}\"`;\n      });\n    })\n    .join(', ');\n  try {\n    const parsedJSONObj = replaceValueEncodings(JSON.parse(`{${jsonString}}`), accumulator);\n    return JSON.stringify(parsedJSONObj, null, 2);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n    return 'null';\n  }\n};\n\nconst replaceValueEncodings = (jsonToParse, accumulator) => {\n  const newObject = {};\n  Object.entries(jsonToParse).forEach(([key, value]) => {\n    let copyOfKey = key;\n    let copyOfValue = value;\n    if (key.indexOf('_') !== -1) {\n      copyOfKey = key.split('_').join('.');\n    }\n    if (copyOfKey.indexOf('date') !== -1) {\n      const splitValues = value.split('--to--');\n      splitValues[0] = dateStringToISO(splitValues[0]);\n      splitValues[1] = dateStringToISO(splitValues[1], true);\n      copyOfValue = {\n        between: splitValues\n      };\n    } else if (value.toString().indexOf('|') !== -1) {\n      const splitValues = value.split('|');\n      copyOfValue = {\n        inq: splitValues\n      };\n    } else {\n      copyOfValue = {\n        eq: value\n      };\n    }\n    newObject[copyOfKey] = copyOfValue;\n  });\n  if (accumulator) {\n    const accumulatedObject = {};\n    accumulatedObject[accumulator] = newObject;\n    return accumulatedObject;\n  }\n  return newObject;\n};\n\nconst dateStringToISO = (dateString, endOfDay = false) => {\n  const dateObj = new Date(`${dateString} 0:00Z`);\n  if (!(dateObj instanceof Date && !Number.isNaN(dateObj.getTime()))) {\n    // eslint-disable-next-line no-console\n    console.log('Invalid date!', dateString);\n    return null;\n  }\n  if (endOfDay) {\n    dateObj.setUTCHours(23, 59, 59, 999);\n  }\n  return dateObj.toISOString();\n};\n\nexport default performCustomStringParse;\n","import * as types from '../Types';\nimport performCustomStringParse from '../../Services/CustomStringParserService';\n\nconst initialState = {\n  parsedResultJSON: '',\n  error: ''\n};\n\nconst StringParserReducer = (state = initialState, action) => {\n  let result;\n  switch (action.type) {\n    case types.CLEAR_PARSER_INPUTS:\n      return {\n        ...state,\n        parsedResultJSON: ''\n      };\n\n    case types.FETCH_PARSER_RESULT: {\n      result = action.result || { textToParse: '', accumulator: 'and' };\n      let error = '';\n      const parsedResultJSON = performCustomStringParse(result.textToParse, result.accumulator);\n      if (parsedResultJSON === 'null') error = 'Error parsing String!';\n      return {\n        ...state,\n        parsedResultJSON,\n        error\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default StringParserReducer;\n","/* eslint-disable no-param-reassign */\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport ContinentsReducer from './ContinentsReducer';\nimport StringParserReducer from './StringParserReducer';\nimport history from '../../Router/History';\n\nconst appReducer = combineReducers({\n  continents: ContinentsReducer,\n  parser: StringParserReducer,\n  router: connectRouter(history)\n});\n\nconst RootReducer = (state, action) => {\n  if (action.type === 'DESTROY_SESSION') {\n    state = undefined;\n  }\n  return appReducer(state, action);\n};\n\nexport default RootReducer;\n","import axios from 'axios';\nimport promise from 'redux-promise-middleware';\nimport ReduxThunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\n\nimport clientMiddleware from './Middlewares/ClientMiddleware';\nimport apolloClient from './Middlewares/ApolloMiddleware';\nimport history from '../Router/History';\nimport RootReducer from './Reducers/RootReducer';\n\nconst httpClient = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json'\n  }\n});\n\nconst configureStore = (options = { logger: true }) => {\n  const enhancers = [];\n\n  if (process.env.REACT_APP_ENV === 'Development') {\n    const { devToolsExtension } = window;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  const middleware = [\n    ReduxThunk,\n    routerMiddleware(history),\n    promise,\n    clientMiddleware(httpClient, apolloClient)\n  ];\n  if (options.logger && process.env.REACT_APP_ENV !== 'Production') {\n    const logger = createLogger({ collapsed: true });\n    middleware.push(logger);\n  }\n  const composedEnhancers = compose(applyMiddleware(...middleware), ...enhancers);\n\n  // Create the store\n  const store = createStore(RootReducer, composedEnhancers);\n\n  return {\n    store,\n    history\n  };\n};\n\nexport default configureStore;\n","import { load as webFontLoader } from 'webfontloader';\n\nconst configureWebFontService = () => {\n  if (typeof webFontLoader !== 'undefined') {\n    webFontLoader({\n      google: {\n        families: ['Montserrat:400,500,700,700i,800']\n      }\n    });\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('WebFont not defined!');\n  }\n};\n\nexport default configureWebFontService;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConnectedRouter as Router } from 'connected-react-router';\nimport { Provider } from 'react-redux';\n\nimport * as sw from './serviceWorker';\nimport AppComponent from './Components/App/AppComponent';\nimport configureStore from './Store/ConfigureStore';\nimport configureWebFontService from './Services/WebFontService';\n\nconst { store, history } = configureStore();\n\n// eslint-disable-next-line no-console\nconsole.log(`${process.env.PROJECT_VERSION}:${process.env.REACT_APP_ENV}`);\n\n// if (process.env.REACT_APP_ENV === 'Development') {\nconfigureWebFontService();\n// }\n\n// Handling service worker registration\nsw.register();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <AppComponent />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n","module.exports = ReactDOM;","export * from './DefaultTypes';\nexport * from './ContinentsTypes';\nexport * from './CountriesTypes';\nexport * from './StringParserTypes';\n","export const SUCCESS_DEFAULT = 'SUCCESS_DEFAULT';\nexport const FAILURE_DEFAULT = 'FAILURE_DEFAULT';\nexport const APOLLO_CLIENT = 'APOLLO';\nexport const HTTP_CLIENT = 'APOLLO';\n","export const LOAD_CONTINENTS_LIST = 'continents/LOAD_DATA_ITEM';\nexport const LOAD_CONTINENTS_LIST_SUCCESS = 'continents/LOAD_DATA_ITEM_SUCCESS';\nexport const LOAD_CONTINENTS_LIST_FAILURE = 'continents/LOAD_DATA_ITEM_FAILURE';\n\nexport const SELECT_CONTINENT = 'continents/SELECT_DATA_ITEM';\nexport const CLEAR_CONTINENTS_LIST = 'continents/CLEAR_LIST';\n","export const FETCH_COUNTRY_RESULT = 'country/FETCH_RESULT';\nexport const FETCH_COUNTRY_RESULT_SUCCESS = 'country/FETCH_RESULT_SUCCESS';\nexport const FETCH_COUNTRY_RESULT_FAILURE = 'country/FETCH_RESULT_FAILURE';\n\nexport const CLEAR_COUNTRY_CHOICES = 'country/CLEAR_CHOICES';\n","export const FETCH_PARSER_RESULT = 'string-parser/FETCH_RESULT';\n\nexport const CLEAR_PARSER_INPUTS = 'string-parser/CLEAR_INPUTS';\n","import * as types from '../Types';\nimport { ListAllContinents } from '../Queries/Continents.graphql';\nimport { CountryDetails as countryDetails } from '../Queries/Countries.graphql';\n\nexport function fetchContinentsList() {\n  return {\n    types: [\n      types.LOAD_CONTINENTS_LIST,\n      types.LOAD_CONTINENTS_LIST_SUCCESS,\n      types.LOAD_CONTINENTS_LIST_FAILURE\n    ],\n    handler: types.APOLLO_CLIENT,\n    promise: client => client.query({ query: ListAllContinents })\n  };\n}\n\nexport function selectContinent(continent) {\n  return {\n    type: types.SELECT_CONTINENT,\n    result: {\n      ...continent\n    }\n  };\n}\n\nexport function fetchCountryDetails(country) {\n  return {\n    types: [\n      types.FETCH_COUNTRY_RESULT,\n      types.FETCH_COUNTRY_RESULT_SUCCESS,\n      types.FETCH_COUNTRY_RESULT_FAILURE\n    ],\n    handler: types.APOLLO_CLIENT,\n    promise: client => client.query({ query: countryDetails, variables: { code: country.code } })\n  };\n}\n\nexport function clearContinents() {\n  return {\n    type: types.CLEAR_CONTINENTS_LIST\n  };\n}\n","import * as types from '../Types';\n\nexport function parseToJSON(textToParse, accumulator) {\n  return {\n    type: types.FETCH_PARSER_RESULT,\n    result: {\n      textToParse,\n      accumulator\n    }\n  };\n}\n\nexport function clearOutcome() {\n  return {\n    type: types.CLEAR_PARSER_INPUTS\n  };\n}\n","import * as ContinentsActions from './ContinentsActions';\nimport * as StringParserActions from './StringParserActions';\n\nexport { ContinentsActions, StringParserActions };\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ListAllContinents\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"continents\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"countries\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]}]}}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ContinentDetails\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"continent\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"countries\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":237}};\n    doc.loc.source = {\"body\":\"query ListAllContinents {\\n  continents {\\n    name\\n    code\\n    countries {\\n      name\\n      code\\n    }\\n  }\\n}\\n\\nquery ContinentDetails($code: String!) {\\n  continent(code: $code) {\\n    name\\n    countries {\\n      name\\n      code\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ListAllContinents\"] = oneQuery(doc, \"ListAllContinents\");\n        \n        module.exports[\"ContinentDetails\"] = oneQuery(doc, \"ContinentDetails\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ListAllCountries\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"countries\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"CountryDetails\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"native\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"emoji\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"currency\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"languages\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":230}};\n    doc.loc.source = {\"body\":\"query ListAllCountries {\\n  countries {\\n    name\\n    code\\n  }\\n}\\n\\nquery CountryDetails($code: String!) {\\n  country(code: $code) {\\n    name\\n    code\\n    native\\n    emoji\\n    currency\\n    languages {\\n      code\\n      name\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ListAllCountries\"] = oneQuery(doc, \"ListAllCountries\");\n        \n        module.exports[\"CountryDetails\"] = oneQuery(doc, \"CountryDetails\");\n        \n"],"sourceRoot":""}