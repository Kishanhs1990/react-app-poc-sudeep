{"version":3,"sources":["../node_modules/ts-invariant/lib/invariant.esm.js"],"names":["genericMessage","_a","Object","setPrototypeOf","obj","proto","__proto__","InvariantError","_super","message","_this","call","this","framesToPop","name","prototype","Error","invariant","condition","wrapConsoleMethod","method","console","apply","arguments","warn","error","processStub","env","process","Function","atLeastWeTried"],"mappings":"0FAAA,2FACIA,EAAiB,sBACjBC,EAAKC,OAAOC,eACZA,OAAwB,IAAPF,EAAgB,SAAUG,EAAKC,GAElD,OADAD,EAAIE,UAAYD,EACTD,GACLH,EAEAM,EAEJ,SAAUC,GAGR,SAASD,EAAeE,QACN,IAAZA,IACFA,EAAUT,GAGZ,IAAIU,EAAQF,EAAOG,KAAKC,KAAyB,kBAAZH,EAAuBT,EAAiB,KAAOS,EAAU,6DAA+DA,IAAYG,KAKzK,OAHAF,EAAMG,YAAc,EACpBH,EAAMI,KAAOd,EACbG,EAAeO,EAAOH,EAAeQ,WAC9BL,EAGT,OAfA,oBAAUH,EAAgBC,GAenBD,EAhBT,CAiBES,OAEF,SAASC,EAAUC,EAAWT,GAC5B,IAAKS,EACH,MAAM,IAAIX,EAAeE,GAI7B,SAASU,EAAkBC,GACzB,OAAO,WACL,OAAOC,QAAQD,GAAQE,MAAMD,QAASE,aAI1C,SAAWN,GACTA,EAAUO,KAAOL,EAAkB,QACnCF,EAAUQ,MAAQN,EAAkB,SAFtC,CAGGF,IAAcA,EAAY,KAO7B,IAAIS,EAAc,CAChBC,IAAK,IAGP,GAAuB,kBAAZC,EACTF,EAAcE,OACT,IAILC,SAAS,OAAQ,iBAAjBA,CAAmCH,GACnC,MAAOI,O","file":"static/js/nm.ts-invariant.52b20c3d.chunk.js","sourcesContent":["import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nfunction wrapConsoleMethod(method) {\n  return function () {\n    return console[method].apply(console, arguments);\n  };\n}\n\n(function (invariant) {\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {})); // Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\n\n\nvar processStub = {\n  env: {}\n};\n\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {// The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\n\nvar invariant$1 = invariant;\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };"],"sourceRoot":""}